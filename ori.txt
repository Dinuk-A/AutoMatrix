 @Test(invocationTimeOut = 35000)
    public void sempsarcGetStreamWithTimeout() {
        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("token", accessToken);
    
        io.restassured.response.Response response = null;
        BufferedReader reader = null;
        InputStream inputStream = null;
    
        // âœ… Add this
        ExecutorService executor = Executors.newSingleThreadExecutor();
        AtomicInteger lineCount = new AtomicInteger(0);
    
        try {
            response = ApiUtils.getReqWithQueryParamsForSempSarc(SEMP_GET_BASE_URL, SEMP_GET_END_URL, queryParams);
            AssertionUtils.assertStatusCode(response, HttpStatusCode.OK.getCode());
    
            inputStream = response.asInputStream();
            reader = new BufferedReader(new InputStreamReader(inputStream));
    
            final BufferedReader readerFinal = reader; // use final inside lambda
    
            Future<Integer> future = executor.submit(() -> {
                int count = 0;
                try {
                    String line;
                    while ((line = readerFinal.readLine()) != null) {
                        if (!line.trim().isEmpty()) {
                            System.out.println("Data: " + line);
                            count++;
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Stream reading interrupted: " + e.getMessage());
                }
                return count;
            });
    
            try {
                int count = future.get(20, TimeUnit.SECONDS);
                lineCount.set(count);
            } catch (TimeoutException e) {
                System.out.println("Time limit reached. Stopping stream.");
            } catch (Exception e) {
                System.out.println("Error reading stream: " + e.getMessage());
            } finally {
                future.cancel(true);
                executor.shutdownNow();
            }
    
            System.out.println("Stream read completed with " + lineCount.get() + " lines.");
            Assert.assertTrue(lineCount.get() > 0, "No streaming data was received.");
    
        } catch (Exception e) {
            Assert.fail("Test failed: " + e.getMessage());
        } finally {
            try {
                if (reader != null)
                    reader.close();
                if (inputStream != null)
                    inputStream.close();
    
                if (response != null && response.getBody() != null) {
                    response.getBody().asInputStream().close();
                }
            } catch (Exception e) {
                System.err.println("Error closing resources: " + e.getMessage());
            }
        }
    }